import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.kotlin.dsl.property
import java.io.File
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString

/**
 * Gradle task to generate OAuth configuration JSON file.
 */
open class GenerateOAuthConfigTask : DefaultTask() {
    
    @get:Input
    val oauthProviders = project.objects.property<Map<String, Any>>()
    
    @get:OutputFile
    val outputFile = project.objects.fileProperty()
    
    @TaskAction
    fun generateConfig() {
        val providers = oauthProviders.get()
        
        // Convert to the format expected by the library
        val config = mapOf(
            "providers" to providers.mapValues { (providerId, config) ->
                @Suppress("UNCHECKED_CAST")
                val providerConfig = config as Map<String, Any>
                mapOf(
                    "providerId" to providerId,
                    "clientId" to (providerConfig["clientId"] as? String ?: ""),
                    "clientSecret" to (providerConfig["clientSecret"] as? String),
                    "redirectUri" to (providerConfig["redirectUri"] as? String ?: ""),
                    "scopes" to (providerConfig["scopes"] as? List<String> ?: emptyList()),
                    "customAuthUrl" to (providerConfig["customAuthUrl"] as? String),
                    "customTokenUrl" to (providerConfig["customTokenUrl"] as? String),
                    "customUserInfoUrl" to (providerConfig["customUserInfoUrl"] as? String),
                    "customRevokeUrl" to (providerConfig["customRevokeUrl"] as? String),
                    "usePKCE" to (providerConfig["usePKCE"] as? Boolean ?: true),
                    "additionalParams" to (providerConfig["additionalParams"] as? Map<String, String> ?: emptyMap()),
                    "isEnabled" to (providerConfig["isEnabled"] as? Boolean ?: true)
                )
            }
        )
        
        // Ensure output directory exists
        outputFile.get().asFile.parentFile.mkdirs()
        
        // Write JSON configuration
        val json = Json {
            prettyPrint = true
            ignoreUnknownKeys = true
        }
        
        val jsonString = json.encodeToString(config)
        outputFile.get().asFile.writeText(jsonString)
        
        logger.info("Generated OAuth configuration: ${outputFile.get().asFile.absolutePath}")
        logger.info("Configured providers: ${providers.keys.joinToString(", ")}")
    }
}

/**
 * Gradle task to generate Kotlin configuration object.
 */
open class GenerateKotlinOAuthConfigTask : DefaultTask() {
    
    @get:Input
    val oauthProviders = project.objects.property<Map<String, Any>>()
    
    @get:OutputFile
    val outputFile = project.objects.fileProperty()
    
    @TaskAction
    fun generateKotlinConfig() {
        val providers = oauthProviders.get()
        
        val kotlinCode = buildString {
            appendLine("// Generated OAuth configuration")
            appendLine("// Do not edit this file manually - it is generated by the Multi-Auth plugin")
            appendLine()
            appendLine("package app.multiauth.config")
            appendLine()
            appendLine("import kotlinx.serialization.json.Json")
            appendLine()
            appendLine("object GeneratedOAuthConfig {")
            appendLine("    const val CONFIG_JSON = \"\"\"")
            
            // Generate JSON string
            val config = mapOf(
                "providers" to providers.mapValues { (providerId, config) ->
                    @Suppress("UNCHECKED_CAST")
                    val providerConfig = config as Map<String, Any>
                    mapOf(
                        "providerId" to providerId,
                        "clientId" to (providerConfig["clientId"] as? String ?: ""),
                        "clientSecret" to (providerConfig["clientSecret"] as? String),
                        "redirectUri" to (providerConfig["redirectUri"] as? String ?: ""),
                        "scopes" to (providerConfig["scopes"] as? List<String> ?: emptyList()),
                        "customAuthUrl" to (providerConfig["customAuthUrl"] as? String),
                        "customTokenUrl" to (providerConfig["customTokenUrl"] as? String),
                        "customUserInfoUrl" to (providerConfig["customUserInfoUrl"] as? String),
                        "customRevokeUrl" to (providerConfig["customRevokeUrl"] as? String),
                        "usePKCE" to (providerConfig["usePKCE"] as? Boolean ?: true),
                        "additionalParams" to (providerConfig["additionalParams"] as? Map<String, String> ?: emptyMap()),
                        "isEnabled" to (providerConfig["isEnabled"] as? Boolean ?: true)
                    )
                }
            )
            
            val json = Json {
                prettyPrint = true
                ignoreUnknownKeys = true
            }
            val jsonString = json.encodeToString(config)
            
            appendLine(jsonString)
            appendLine("\"\"\".trimIndent()")
            appendLine()
            appendLine("    fun loadConfiguration() {")
            appendLine("        OAuthConfigurationManager.loadConfiguration(CONFIG_JSON)")
            appendLine("    }")
            appendLine("}")
        }
        
        // Ensure output directory exists
        outputFile.get().asFile.parentFile.mkdirs()
        
        // Write Kotlin configuration
        outputFile.get().asFile.writeText(kotlinCode)
        
        logger.info("Generated Kotlin OAuth configuration: ${outputFile.get().asFile.absolutePath}")
    }
}

/**
 * Gradle task to generate Android string resources for OAuth configuration.
 */
open class GenerateAndroidOAuthResourcesTask : DefaultTask() {
    
    @get:Input
    val oauthProviders = project.objects.property<Map<String, Any>>()
    
    @get:OutputFile
    val outputFile = project.objects.fileProperty()
    
    @TaskAction
    fun generateAndroidResources() {
        val providers = oauthProviders.get()
        
        val xmlContent = buildString {
            appendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            appendLine("<resources>")
            appendLine("    <!-- Generated OAuth configuration -->")
            appendLine("    <!-- Do not edit this file manually - it is generated by the Multi-Auth plugin -->")
            appendLine()
            
            providers.forEach { (providerId, config) ->
                @Suppress("UNCHECKED_CAST")
                val providerConfig = config as Map<String, Any>
                
                val clientId = providerConfig["clientId"] as? String ?: ""
                val clientSecret = providerConfig["clientSecret"] as? String ?: ""
                val redirectUri = providerConfig["redirectUri"] as? String ?: ""
                val scopes = providerConfig["scopes"] as? List<String> ?: emptyList()
                
                appendLine("    <!-- $providerId OAuth Configuration -->")
                appendLine("    <string name=\"oauth_${providerId}_client_id\">$clientId</string>")
                if (clientSecret.isNotEmpty()) {
                    appendLine("    <string name=\"oauth_${providerId}_client_secret\">$clientSecret</string>")
                }
                appendLine("    <string name=\"oauth_${providerId}_redirect_uri\">$redirectUri</string>")
                appendLine("    <string name=\"oauth_${providerId}_scopes\">${scopes.joinToString(",")}</string>")
                appendLine()
            }
            
            appendLine("</resources>")
        }
        
        // Ensure output directory exists
        outputFile.get().asFile.parentFile.mkdirs()
        
        // Write XML resources
        outputFile.get().asFile.writeText(xmlContent)
        
        logger.info("Generated Android OAuth resources: ${outputFile.get().asFile.absolutePath}")
    }
}
