package app.favorize.multiauth.tasks

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction
import org.gradle.kotlin.dsl.mapProperty
import org.gradle.kotlin.dsl.property

open class GenerateOAuthConfigTask : DefaultTask() {
    @get:Input
    val oauthProviders = project.objects.mapProperty(String::class.java, Any::class.java)
    @get:OutputFile
    val outputFile = project.objects.fileProperty()
    @TaskAction
    fun generateConfig() {
        val providers = oauthProviders.get()
        val config = mapOf(
            "providers" to providers.mapValues { (providerId, config) ->
                @Suppress("UNCHECKED_CAST")
                val providerConfig = config as Map<String, Any?>
                mapOf(
                    "providerId" to providerId,
                    "clientId" to (providerConfig["clientId"] as? String ?: ""),
                    "clientSecret" to (providerConfig["clientSecret"] as? String),
                    "redirectUri" to (providerConfig["redirectUri"] as? String ?: ""),
                    "scopes" to (providerConfig["scopes"] as? List<String> ?: emptyList()),
                    "customAuthUrl" to (providerConfig["customAuthUrl"] as? String),
                    "customTokenUrl" to (providerConfig["customTokenUrl"] as? String),
                    "customUserInfoUrl" to (providerConfig["customUserInfoUrl"] as? String),
                    "customRevokeUrl" to (providerConfig["customRevokeUrl"] as? String),
                    "usePKCE" to (providerConfig["usePKCE"] as? Boolean ?: true),
                    "additionalParams" to (providerConfig["additionalParams"] as? Map<String, String> ?: emptyMap()),
                    "isEnabled" to (providerConfig["isEnabled"] as? Boolean ?: true)
                )
            }
        )
        outputFile.get().asFile.parentFile.mkdirs()
        val jsonString = generateJson(config)
        outputFile.get().asFile.writeText(jsonString)
        logger.info("Generated OAuth configuration: ${'$'}{outputFile.get().asFile.absolutePath}")
        logger.info("Configured providers: ${'$'}{providers.keys.joinToString(", ")}")
    }
    fun generateJson(value: Any?, indent: String = ""): String {
        return when (value) {
            is Map<*, *> -> {
                val entries = value.entries.joinToString(",\n") { (k, v) ->
                    "$indent  \"$k\": ${generateJson(v, "$indent  ")}"
                }
                "{\n$entries\n$indent}"
            }
            is List<*> -> {
                val items = value.joinToString(",\n") { item ->
                    "$indent  ${generateJson(item, "$indent  ")}"
                }
                "[\n$items\n$indent]"
            }
            is String -> "\"${value.replace("\"", "\\\"").replace("\n", "\\n").replace("\r", "\\r")}\""
            is Boolean, is Number -> value.toString()
            null -> "null"
            else -> "\"$value\""
        }
    }
}

open class GenerateKotlinOAuthConfigTask : DefaultTask() {
    @get:Input
    val oauthProviders = project.objects.mapProperty(String::class.java, Any::class.java)
    @get:OutputFile
    val outputFile = project.objects.fileProperty()
    @TaskAction
    fun generateKotlinConfig() {
        val providers = oauthProviders.get()
        val kotlinCode = buildString {
            appendLine("// Generated OAuth configuration")
            appendLine("// Do not edit this file manually - it is generated by the Multi-Auth plugin")
            appendLine()
            appendLine("package app.multiauth.config")
            appendLine()
            appendLine("import kotlinx.serialization.json.Json")
            appendLine()
            appendLine("object GeneratedOAuthConfig {")
            appendLine("    const val CONFIG_JSON = \"\"\"")
            val config = mapOf(
                "providers" to providers.mapValues { (providerId, config) ->
                    @Suppress("UNCHECKED_CAST")
                    val providerConfig = config as Map<String, Any?>
                    mapOf(
                        "providerId" to providerId,
                        "clientId" to (providerConfig["clientId"] as? String ?: ""),
                        "clientSecret" to (providerConfig["clientSecret"] as? String),
                        "redirectUri" to (providerConfig["redirectUri"] as? String ?: ""),
                        "scopes" to (providerConfig["scopes"] as? List<String> ?: emptyList()),
                        "customAuthUrl" to (providerConfig["customAuthUrl"] as? String),
                        "customTokenUrl" to (providerConfig["customTokenUrl"] as? String),
                        "customUserInfoUrl" to (providerConfig["customUserInfoUrl"] as? String),
                        "customRevokeUrl" to (providerConfig["customRevokeUrl"] as? String),
                        "usePKCE" to (providerConfig["usePKCE"] as? Boolean ?: true),
                        "additionalParams" to (providerConfig["additionalParams"] as? Map<String, String> ?: emptyMap()),
                        "isEnabled" to (providerConfig["isEnabled"] as? Boolean ?: true)
                    )
                }
            )
            val jsonString = GenerateOAuthConfigTask().generateJson(config)
            appendLine(jsonString)
            appendLine("\"\"\".trimIndent()")
            appendLine()
            appendLine("    fun loadConfiguration() {")
            appendLine("        OAuthConfigurationManager.loadConfiguration(CONFIG_JSON)")
            appendLine("    }")
            appendLine("}")
        }
        outputFile.get().asFile.parentFile.mkdirs()
        outputFile.get().asFile.writeText(kotlinCode)
        logger.info("Generated Kotlin OAuth configuration: ${'$'}{outputFile.get().asFile.absolutePath}")
    }
}

open class GenerateAndroidOAuthResourcesTask : DefaultTask() {
    @get:Input
    val oauthProviders = project.objects.mapProperty(String::class.java, Any::class.java)
    @get:OutputFile
    val outputFile = project.objects.fileProperty()
    @TaskAction
    fun generateAndroidResources() {
        val providers = oauthProviders.get()
        val xmlContent = buildString {
            appendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            appendLine("<resources>")
            appendLine("    <!-- Generated OAuth configuration -->")
            appendLine("    <!-- Do not edit this file manually - it is generated by the Multi-Auth plugin -->")
            providers.forEach { (providerId, config) ->
                @Suppress("UNCHECKED_CAST")
                val providerConfig = config as Map<String, Any?>
                val clientId = providerConfig["clientId"] as? String ?: ""
                val clientSecret = providerConfig["clientSecret"] as? String ?: ""
                val redirectUri = providerConfig["redirectUri"] as? String ?: ""
                val scopes = providerConfig["scopes"] as? List<String> ?: emptyList()
                appendLine("    <string name=\"${'$'}{providerId}_client_id\">${'$'}clientId</string>")
                appendLine("    <string name=\"${'$'}{providerId}_client_secret\">${'$'}clientSecret</string>")
                appendLine("    <string name=\"${'$'}{providerId}_redirect_uri\">${'$'}redirectUri</string>")
                appendLine("    <string-array name=\"${'$'}{providerId}_scopes\">")
                scopes.forEach { scope ->
                    appendLine("        <item>${'$'}scope</item>")
                }
                appendLine("    </string-array>")
            }
            appendLine("</resources>")
        }
        outputFile.get().asFile.parentFile.mkdirs()
        outputFile.get().asFile.writeText(xmlContent)
        logger.info("Generated Android OAuth resources: ${'$'}{outputFile.get().asFile.absolutePath}")
    }
}
